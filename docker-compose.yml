# EHS Electronic Journal - Docker Compose Configuration
# Complete laboratory management system deployment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ehs_postgres
    environment:
      POSTGRES_DB: ehs_electronic_journal
      POSTGRES_USER: ehs_user
      POSTGRES_PASSWORD: ehs_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - ehs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ehs_user -d ehs_electronic_journal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: ehs_backend
    environment:
      - DATABASE_URL=postgresql://ehs_user:ehs_password@postgres:5432/ehs_electronic_journal
      - SECRET_KEY=your-production-secret-key-change-this
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./frontend:/app/frontend
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ehs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ehs_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - ehs_network
    restart: unless-stopped

  # Redis for Session Management (Optional)
  redis:
    image: redis:7-alpine
    container_name: ehs_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ehs_network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ehs_network:
    driver: bridge
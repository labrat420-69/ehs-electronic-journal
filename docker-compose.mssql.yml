# EHS Electronic Journal - MS SQL Server Docker Compose Configuration
# Windows-compatible deployment with MS SQL Server

services:
  # MS SQL Server Database
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: ehs_mssql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "EhsPassword123!"
      MSSQL_PID: "Express"
      MSSQL_DATABASE: "ehs_electronic_journal"
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
      # Init script for database creation
      - type: bind
        source: ./database/sqlserver/init.sql
        target: /docker-entrypoint-initdb.d/01-init.sql
        read_only: true
    networks:
      - ehs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P EhsPassword123! -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # FastAPI Backend with MS SQL Server
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: ehs_backend_mssql
    environment:
      - DATABASE_TYPE=mssql
      - MSSQL_SERVER=mssql
      - MSSQL_PORT=1433
      - MSSQL_DATABASE=ehs_electronic_journal
      - MSSQL_USER=ehs_user
      - MSSQL_PASSWORD=EhsPassword123!
      - MSSQL_DRIVER=ODBC Driver 18 for SQL Server
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-change-this}
      - DEBUG=${DEBUG:-false}
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    # Windows-compatible volume mounts with explicit bind types
    volumes:
      - type: bind
        source: ./backend
        target: /app/backend
        read_only: true
      - type: bind
        source: ./frontend
        target: /app/frontend
        read_only: true
    depends_on:
      mssql:
        condition: service_healthy
    networks:
      - ehs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ehs_nginx_mssql
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - type: bind
        source: ./docker/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - type: bind
        source: ./docker/ssl
        target: /etc/nginx/ssl
        read_only: true
    depends_on:
      - backend
    networks:
      - ehs_network
    restart: unless-stopped

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: ehs_redis_mssql
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ehs_network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mssql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ehs_network:
    driver: bridge